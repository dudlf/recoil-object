{"version":3,"sources":["../src/index.ts","../src/recoil-object/recoil-object.js","../src/utils/is-object.ts"],"sourcesContent":["export * from './recoil-object'","import { atom } from 'recoil'\r\nimport { setRecoil } from 'recoil-nexus'\r\n\r\nimport { isObject } from '../utils/is-object'\r\n\r\nfunction getEffectsSelf(args, parent) {\r\n  if (parent) {\r\n    return [\r\n      ...(args.options?.['_self']?.effects || []),\r\n      ({ onSet }) => {\r\n        onSet((newValue) => {\r\n          setRecoil(parent, (currVal) => ({\r\n            ...currVal,\r\n            [args.key]: newValue,\r\n          }))\r\n        })\r\n      },\r\n    ]\r\n  }\r\n  return args.options?.['_self']?.effects || []\r\n}\r\n\r\nfunction getEffectsNode(args, propKey, useRootAtom) {\r\n  if (useRootAtom) {\r\n    return [\r\n      ...(args.options?.[propKey]?.effects || []),\r\n      useRootAtom &&\r\n      (({ onSet }) => {\r\n        onSet((newValue) => {\r\n          setRecoil(_self, (currVal) => ({\r\n            ...currVal,\r\n            [propKey]: newValue,\r\n          }))\r\n        })\r\n      }),\r\n    ]\r\n  }\r\n  return args.options?.[propKey]?.effects || []\r\n}\r\n\r\nfunction createRecoilObject(args, useRootAtom, parent) {\r\n  const _self = useRootAtom\r\n    ? atom({\r\n      ...args.options?._self,\r\n      key: args.key,\r\n      default: args.default,\r\n      effects: getEffectsSelf(args, parent),\r\n    })\r\n    : undefined\r\n\r\n  function mapper(e) {\r\n    const [propKey, propVal] = e\r\n\r\n    const atomkey = `${args.key}.${String(propKey)}`\r\n\r\n    if (isObject(propVal)) {\r\n      return [\r\n        propKey,\r\n        createRecoilObject(\r\n          {\r\n            key: atomkey,\r\n            default: propVal,\r\n            options: args.options?.[propKey],\r\n          },\r\n          useRootAtom,\r\n          _self\r\n        ),\r\n      ]\r\n    }\r\n\r\n    return [\r\n      propKey,\r\n      atom({\r\n        ...args.options?.[propKey],\r\n        key: atomkey,\r\n        default: propVal,\r\n        effects: getEffectsNode(args, propKey, useRootAtom),\r\n      }),\r\n    ]\r\n  }\r\n\r\n  function reducer(prev, curr) {\r\n    return {\r\n      ...prev,\r\n      [curr[0]]: curr[1],\r\n    }\r\n  }\r\n\r\n  return Object.entries(args.default)\r\n    .map(mapper)\r\n    .reduce(reducer, useRootAtom ? { _self } : {})\r\n}\r\n\r\nfunction recoilObject(args) {\r\n  return createRecoilObject(args, false)\r\n}\r\n\r\nfunction recoilObjectWithRoot(args) {\r\n  return createRecoilObject(args, true)\r\n}\r\n\r\nexport default {\r\n  recoilObject,\r\n  recoilObjectWithRoot,\r\n}\r\n","import { RecoilLoadable } from 'recoil'\r\nimport { isPromise } from './is-promise'\r\n\r\nexport function isObject(obj: any) {\r\n  return typeof obj === 'object' && !isPromise(obj) && !RecoilLoadable.isLoadable(obj)\r\n}\r\n\r\nexport default {\r\n  isObject,\r\n}\r\n"],"mappings":"+WAAA,6BCAA,MAAqB,kBACrB,EAA0B,wBCD1B,MAA+B","names":[]}